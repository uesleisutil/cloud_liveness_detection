name: Deploy to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Ensure SSH Access in Security Group
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}
        run: |
          set -x  # Ativar modo de depuração
          # Verificar se a regra de segurança já existe
          RULE_EXISTS=$(aws ec2 describe-security-groups --group-ids $SECURITY_GROUP_ID --query "SecurityGroups[0].IpPermissions[?FromPort==\`22\` && ToPort==\`22\` && IpProtocol=='tcp' && contains(IpRanges[].CidrIp, '0.0.0.0/0')]" --output text)
          if [ -z "$RULE_EXISTS" ]; then
            # Adicionar a regra de segurança para permitir conexões SSH na porta 22
            aws ec2 authorize-security-group-ingress --group-id $SECURITY_GROUP_ID --protocol tcp --port 22 --cidr 0.0.0.0/0
          else
            echo "A regra de segurança para conexões SSH na porta 22 já existe."
          fi

      - name: Ensure Subnet and Route Table Configuration
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          SUBNET_ID: ${{ secrets.SUBNET_ID }}
          INTERNET_GATEWAY_ID: ${{ secrets.INTERNET_GATEWAY_ID }}
        run: |
          set -x  # Ativar modo de depuração
          # Verificar se a Subnet está associada a uma tabela de rotas com um Gateway da Internet
          ROUTE_TABLE_ID=$(aws ec2 describe-route-tables --filters "Name=association.subnet-id,Values=$SUBNET_ID" --query "RouteTables[0].RouteTableId" --output text)
          IGW_ROUTE_EXISTS=$(aws ec2 describe-route-tables --route-table-ids $ROUTE_TABLE_ID --query "RouteTables[0].Routes[?GatewayId=='igw-*']" --output text)
          if [ -z "$IGW_ROUTE_EXISTS" ]; then
            echo "A Subnet não está associada a uma tabela de rotas com um Gateway da Internet. Adicionando rota."
            aws ec2 create-route --route-table-id $ROUTE_TABLE_ID --destination-cidr-block 0.0.0.0/0 --gateway-id $INTERNET_GATEWAY_ID
          else
            echo "A Subnet está corretamente configurada."
          fi

          # Verificar se a resolução de DNS está habilitada
          DNS_RESOLUTION=$(aws ec2 describe-vpcs --vpc-ids $(aws ec2 describe-subnets --subnet-ids $SUBNET_ID --query "Subnets[0].VpcId" --output text) --query "Vpcs[0].EnableDnsSupport" --output text)
          if [ "$DNS_RESOLUTION" != "true" ]; then
            echo "Ativando resolução de DNS para a VPC."
            aws ec2 modify-vpc-attribute --vpc-id $(aws ec2 describe-subnets --subnet-ids $SUBNET_ID --query "Subnets[0].VpcId" --output text) --enable-dns-support
          else
            echo "Resolução de DNS já está ativada."
          fi

          # Verificar se o host DNS está habilitado
          DNS_HOSTNAMES=$(aws ec2 describe-vpcs --vpc-ids $(aws ec2 describe-subnets --subnet-ids $SUBNET_ID --query "Subnets[0].VpcId" --output text) --query "Vpcs[0].EnableDnsHostnames" --output text)
          if [ "$DNS_HOSTNAMES" != "true" ]; then
            echo "Ativando hostnames DNS para a VPC."
            aws ec2 modify-vpc-attribute --vpc-id $(aws ec2 describe-subnets --subnet-ids $SUBNET_ID --query "Subnets[0].VpcId" --output text) --enable-dns-hostnames
          else
            echo "Hostnames DNS já estão ativados."
          fi

      - name: Check Outbound Rules in Security Group
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}
        run: |
          set -x  # Ativar modo de depuração
          # Verificar se as regras de saída permitem todas as conexões de saída
          OUTBOUND_RULE_EXISTS=$(aws ec2 describe-security-groups --group-ids $SECURITY_GROUP_ID --query "SecurityGroups[0].IpPermissionsEgress[?IpProtocol=='-1' && contains(IpRanges[].CidrIp, '0.0.0.0/0')]" --output text)
          if [ -z "$OUTBOUND_RULE_EXISTS" ]; then
            echo "Adicionando regra de saída para permitir todas as conexões de saída."
            aws ec2 authorize-security-group-egress --group-id $SECURITY_GROUP_ID --protocol -1 --port -1 --cidr 0.0.0.0/0
          else
            echo "Regras de saída já configuradas."
          fi

      - name: Check Network ACL Configuration
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          SUBNET_ID: ${{ secrets.SUBNET_ID }}
        run: |
          set -x  # Ativar modo de depuração
          # Verificar regras de entrada da ACL de rede
          NETWORK_ACL_ID=$(aws ec2 describe-network-acls --filters "Name=association.subnet-id,Values=$SUBNET_ID" --query "NetworkAcls[0].NetworkAclId" --output text)
          INBOUND_ACL_RULE_EXISTS=$(aws ec2 describe-network-acls --network-acl-ids $NETWORK_ACL_ID --query "NetworkAcls[0].Entries[?RuleNumber==\`100\` && RuleAction=='allow' && Protocol=='6' && PortRange.From==\`22\` && PortRange.To==\`22\`]" --output text)
          if [ -z "$INBOUND_ACL_RULE_EXISTS" ]; then
            echo "Adicionando regra de entrada na ACL de rede para permitir conexões SSH."
            aws ec2 create-network-acl-entry --network-acl-id $NETWORK_ACL_ID --rule-number 101 --protocol tcp --port-range From=22,To=22 --ingress --rule-action allow --cidr-block 0.0.0.0/0
          else
            echo "Regras de entrada da ACL de rede já configuradas."
          fi

          # Verificar regras de saída da ACL de rede
          OUTBOUND_ACL_RULE_EXISTS=$(aws ec2 describe-network-acls --network-acl-ids $NETWORK_ACL_ID --query "NetworkAcls[0].Entries[?RuleNumber==\`101\` && RuleAction=='allow' && Protocol=='6' && Egress==true]" --output text)
          if [ -z "$OUTBOUND_ACL_RULE_EXISTS" ]; then
            echo "Adicionando regra de saída na ACL de rede para permitir todas as conexões de saída."
            aws ec2 create-network-acl-entry --network-acl-id $NETWORK_ACL_ID --rule-number 101 --protocol tcp --port-range From=0,To=65535 --egress --rule-action allow --cidr-block 0.0.0.0/0
          else
            echo "Regras de saída da ACL de rede já configuradas."
          fi

      - name: Create EC2 Instance
        id: create_ec2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          EC2_KEY_NAME: ${{ secrets.EC2_KEY_NAME }}
          SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}
          SUBNET_ID: ${{ secrets.SUBNET_ID }}
          AMI_ID: ${{ secrets.AMI_ID_AWS }}
        run: |
          set -x  # Ativar modo de depuração
          INSTANCE_ID=$(aws ec2 run-instances --image-id $AMI_ID --count 1 --instance-type t2.micro --key-name $EC2_KEY_NAME --security-group-ids $SECURITY_GROUP_ID --subnet-id $SUBNET_ID --associate-public-ip-address --user-data file://ec2-user-data.sh --query 'Instances[0].InstanceId' --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          # Wait for the instance to be running
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID

      - name: Get instance IP
        id: get_instance_ip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          set -x  # Ativar modo de depuração
          INSTANCE_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
          if [ -z "$INSTANCE_IP" ]; then
            echo "Failed to retrieve instance IP"
            exit 1
          fi
          echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV

      - name: Deploy Streamlit App
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          EC2_KEY_NAME: ${{ secrets.EC2_KEY_NAME }}
          SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}
          SUBNET_ID: ${{ secrets.SUBNET_ID }}
          AMI_ID: ${{ secrets.AMI_ID_AWS }}
          EC2_KEY_PEM: ${{ secrets.EC2_KEY_PEM }}
          INSTANCE_IP: ${{ steps.get_instance_ip.outputs.INSTANCE_IP }}
        run: |
          # Escreva a chave privada em um arquivo temporário
          echo "${{ secrets.EC2_KEY_PEM }}" > ec2_key.pem
          chmod 600 ec2_key.pem
          nc -zv $INSTANCE_IP 22
          if [ $? -ne 0 ]; then
            echo "Failed to connect to instance on port 22"
            exit 1
          fi
          chmod +x deploy_streamlit.sh
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ec2-user@$INSTANCE_IP << 'EOF'
            cd /home/ec2-user/liveness_detection
            git pull
            pkill streamlit
            nohup streamlit run app/streamlit_app.py --server.port 80 --server.address 0.0.0.0 &
          EOF