name: Deploy to AWS

on:
  push:
    branches:
      - main

jobs:
  deploy_lambda:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Package and deploy to Lambda
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          LAMBDA_FUNCTION_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME }}
          LAMBDA_ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.LAMBDA_ROLE_ARN }}
        run: |
          apt-get update && apt-get install -y zip
          zip -r function.zip .
          aws configure set region $AWS_DEFAULT_REGION

          # Check if the Lambda function exists
          if aws lambda get-function --function-name $LAMBDA_FUNCTION_NAME; then
            echo "Function exists, updating..."
            aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME --zip-file fileb://function.zip --region $AWS_DEFAULT_REGION
          else
            echo "Function does not exist, creating..."
            aws lambda create-function --function-name $LAMBDA_FUNCTION_NAME \
              --runtime python3.8 \
              --role $LAMBDA_ROLE_ARN \
              --handler app.api.handler \
              --zip-file fileb://function.zip \
              --region $AWS_DEFAULT_REGION

  create_and_deploy_ec2:
    runs-on: ubuntu-latest
    needs: deploy_lambda

    outputs:
      INSTANCE_IP: ${{ steps.get_instance_ip.outputs.INSTANCE_IP }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Create EC2 Instance
        id: create_ec2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          EC2_KEY_NAME: ${{ secrets.EC2_KEY_NAME }}
          SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}
          SUBNET_ID: ${{ secrets.SUBNET_ID }}
        run: |
          # Run EC2 instance with user-data script
          INSTANCE_ID=$(aws ec2 run-instances --image-id ami-0c55b159cbfafe1f0 --count 1 --instance-type t2.micro --key-name $EC2_KEY_NAME --security-group-ids $SECURITY_GROUP_ID --subnet-id $SUBNET_ID --user-data file://ec2-user-data.sh --query 'Instances[0].InstanceId' --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

          # Wait for the instance to be running
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID

      - name: Deploy Streamlit App
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          EC2_KEY_NAME: ${{ secrets.EC2_KEY_NAME }}
          INSTANCE_IP: ${{ secrets.INSTANCE_IP }}
        run: |
          # Connect to EC2 instance and pull latest code, then restart Streamlit
          ssh -o StrictHostKeyChecking=no -i /path/to/your-key-pair.pem ec2-user@$INSTANCE_IP << 'EOF'
          cd /home/ec2-user/liveness_detection
          git pull
          pkill streamlit
          nohup streamlit run app/streamlit_app.py --server.port 80 --server.address 0.0.0.0 &
          EOF
